###########################################################################################
####                                                                                  #####
####                                    WARNING                                       #####
#### Do not delete any field, if you want delete debug level for log, set it to false #####
####                                                                                  #####
###########################################################################################
[openstack_orchestrator]
# Set 0.0.0.0 to listen on all addresses
ip = 0.0.0.0
port = 9200

# 
openstack_ip = 130.192.225.168

# Set the Keystone API version that the openstack orchestrator should use to contact OpenStack. Starting from Mitaka version, v2 APIs have been deprecated.
# This value can be 2 or 3 
identity_api_version = 3

# Timeout after that the domain orchestrator will stop waiting for a response (in seconds)
timeout = 90

# In this mode, service graph will not be really instantiated, but the nf-fg created
# will be logged in the log file.
debug_mode = false

[authentication]
token_expiration = 86400

[networks]
# List of the networks that have to be used while instantiating VNFs. If there are no constraints on openstack networks (e.g., we can create our own networks) you can comment the following line
#openstack_networks = exp280, exp281, exp282, exp283, exp284, exp285, exp286, exp287, exp288, exp289, exp290, exp291, exp292, exp293, exp294, exp295, exp296, exp297, exp298, exp299

[doubledecker]
dd_name = openstack_orchestrator
dd_customer = public
broker_address = tcp://127.0.0.1:5555
dd_keyfile = config/public-keys.json

[domain_description]
topic = frog:domain-description
file = config/ResourceDescription.json

[log]
# Location of the log file
log_file=OpenstackOrchestrator.log

# Log levels
verbose = true
debug = true

[db]
# Mysql DB
connection = mysql+pymysql://root:root@127.0.0.1/openstack_orchestrator

[templates]
# Define the source where the templates can be achieved. This source can be 'vnf-repository'
# or 'file' (that identify the file system)
source = file

# This is considered in case source=file
path = templates/

# This is considered in case source=vnf-repository
# Define the url where the templates will be requested
repository_url = http://127.0.0.1:8080/v1/VNF/

#[flowrule]
# Define the default priority for the flows in the NF-FG
#default_priority = 20000

[switch]
# Template of a VNF that acts as a switch.
#template = http://130.192.225.193:9292/v2/images/483ae2c1-9c8b-49c8-bfdb-b9626a768a18/file
template = switch.json

switch_l2_name = Switch, data-switch
switch_l2_control_name = Control_Switch, switch-control

